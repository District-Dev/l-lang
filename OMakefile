# Copyright 2013 Matthieu Lemerre
# This is the OMakefile for the `omake' build system.
# For more information about using OMake, see
# http://omake.metaprl.org/manual/omake-doc.html#htoc147
# http://www.camlcity.org/knowledge/kb_001_omake_recipes.html

########################################################################
# OMake configuration

# Display all commands, not just the ones that display output.
OMakeFlags(--no-S)

# Display each directory. This allows Emacs compile-mode to retrieve
# the correct files on errors. 
OMakeFlags(-w)

# Warn on problems in OMakefiles.
OMakeFlags(-Wdeclare)

########################################################################
# Phony targets are scoped, so you probably want to declare them first.
#

# Note: doc and install are not yet implemented.
.PHONY: all clean clone tests todos annot backup # doc install

########################################################################
# OCaml configuration.

# The default OMake configuration for Ocaml fails on warning (-warn-error A)
# we change that.

# The METAS files for ocamlfind are lacking in debian, so we hack
# around using this. getting the proper link flags to link to LLVM is
# a nightmare; the llvm-config tool helps somewhat.
OCAMLFLAGS=
OCAMLFLAGS += -annot
OCAML_LINK_FLAGS += -cclib -lllvm
OCAML_LINK_FLAGS += -cclib -lllvm_bitreader -cclib -lLLVMBitReader
#OCAMLFLAGS += -cclib -lllvm_bitwriter
OCAML_LINK_FLAGS += -cclib -lllvm_analysis -cclib -lLLVMAnalysis -cclib -lLLVMTarget
OCAML_LINK_FLAGS += -cclib -lllvm_executionengine -cclib -lLLVMX86Disassembler\
	      -cclib -lLLVMX86AsmParser -cclib  -lLLVMX86CodeGen\
	      -cclib -lLLVMSelectionDAG -cclib -lLLVMAsmPrinter\
	      -cclib -lLLVMMCParser -cclib  -lLLVMX86Desc -cclib -lLLVMX86Info\
              -cclib -lLLVMX86AsmPrinter -cclib -lLLVMX86Utils -cclib -lLLVMJIT\
	      -cclib -lLLVMExecutionEngine -cclib -lLLVMCodeGen\
	      -cclib -lLLVMScalarOpts -cclib -lLLVMInstCombine\
	      -cclib -lLLVMTransformUtils -cclib -lLLVMipa -cclib -lLLVMAnalysis
OCAML_LINK_FLAGS += -cclib -lllvm_target -cclib -lLLVMTarget\
		    -cclib -lLLVMMC -cclib -lLLVMObject
OCAML_LINK_FLAGS += -cclib -lLLVMInterpreter
OCAML_LINK_FLAGS += -cclib -lLLVMCore -cclib -lLLVMSupport
OCAML_LINK_FLAGS += -cclib -lffi

#ocamlfind ocamlc -package llvm,llvm.bitreader,llvm.executionengine,llvm.analysis,llvm.bitwriter -annot -cc g++ -g -I . -I . -I cps -I support -I llvm -I ../next/ast -custom -o main.run support/support.cma constant.cmo tokenpack.cmo token.cmo parserpack.cmo parser.cmo ../next/ast/ast.cmo cps/cpsbasepack.cmo cps/cpsbase.cmo cps/cpsfree.cmo cps/cpsconvertclosures.cmo cps/cpstransformpack.cmo cps/cpstransform.cmo llvm/llvmenv.cmo llvm/cpsllvm.cmo llvm/llvmexec.cmo compilation_passes.cmo pretty_print.cmo main.cmo -linkpkg -cclib -lllvm -cclib -lllvm_bitreader -cclib -lllvm_executionengine -cclib -lLLVMExecutionEngine -cclib -lLLVMJIT -cclib -lLLVMCodeGen -cclib -lLLVMX86CodeGen -cclib -lllvm_target -cclib -lLLVMTarget -cclib -lLLVMCore -cclib -lLLVMSupport 

# General configuration.
NATIVE_ENABLED = false
BYTE_ENABLED = true

# Use variables OCAMLPACKS to link with additional packages
USE_OCAMLFIND = true

########################################################################
# Subdirectories.
# You may want to include some subdirectories in this project.
# If so, define the subdirectory targets and uncomment this section.
#

# OCAMLFLAGS += -warn-error a

vmount_rec_in(src, dest) =
#    echo "mounting:"
    foreach(d, $(subdirs $(src)))
#        echo $(dest)/$(d)
	mkdir -p $(d)
        vmount(-fl, $(d), $(dest)/$(d))

SRC_SUBDIRS[] = src unit_tests next

# We vmount each directory containing source code in `build', to allow
# out-of-source build. But we add these directories to "project
# directories", so that we can type "omake" anywhere without omake 
# complaining that "the current directory [...] is not part of the root project".
foreach(d, $(SRC_SUBDIRS))
	vmount_rec_in($(d),build)
	add-project-directories($(subdirs $(d)))

.SUBDIRS: $(addprefix build/, $(SRC_SUBDIRS)) # $(SRC_SUBDIRS) # (for annots)

# Annot rule: copies .annot files from build/ when .ml files have
# changed, if the file has been built. Useful to query types from Emacs.
section
	ROOTDIR = $(absname $(PWD))
	.SUBDIRS: $(ls RD, $(SRC_SUBDIRS))
		%.annot: %.ml # build/%.cmo
			cp -f $(addprefix $(ROOTDIR)/build,$(removeprefix $(ROOTDIR), $(absname $@))) $@ || touch $@

	src_files = $(filter %.ml, $(ls R, $(SRC_SUBDIRS)))
	annot_files = $(replacesuffixes .ml, .annot, $(src_files))
	annot: $(annot_files)

all: tests annot

tests[] = support/test_union_find.out cps/test_cpsconvertclosures.out
tests[] = $(addprefix build/unit_tests/, $(tests))

tests: $(tests)

todos:
	sh -c "find . -type f -exec grep -n -e TODO {} +"
# Lines with more than 80 characters.
#	sh -c 'find . -type f -name *.ml* -exec grep -n -e ^................................................................................ {} +' 


.DEFAULT: all

# All files are built in `build', so it is easy to clean things up.
clean:
	rm -Rf build
#	find . -name '*.annot' -delete

clone:
	sh -c 'cd `mktemp -d` && git clone $(PWD) && cd l-lang && omake '

backup: clean
	sh -c 'cd .. && tar czf l-lang_`date "+%y-%m-%d-%H-%M"`_`uname -n`.tgz l-lang'
